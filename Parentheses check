//Parentheses check
//Stack's application
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct Node
{
    char data;
    struct Node* next;
}Node;
Node *head = NULL;

Node *make_new_node(char k)
{
    Node *p = (Node *)malloc(sizeof(Node));
    p->data = k;
    p->next = NULL;
    return p;
}

void PUSH(char k)
{
    Node* newnode = make_new_node(k);
    newnode->next = head;
    head = newnode;
}

int isEmpty()
{
    return head == NULL;
}

char POP()
{
    char x = head->data;
    Node* p = head;
    head = head->next;
    free(p);
    return x;
}

int isMatchingPair(char character1, char character2)
{
    if (character1 == '(' && character2 == ')')
        return 1;
    else if (character1 == '{' && character2 == '}')
        return 1;
    else if (character1 == '[' && character2 == ']')
        return 1;
    else
        return 0;
}

int check_balanced(char input[])
{
    for (int i = 0; i<strlen(input); i++)
    {
        if (input[i] == '(' || input[i] == '{' || input[i] == '[')
            PUSH(input[i]);
        if (input[i] == ')' || input[i] == '}' || input[i] == ']')
        {
            if (isEmpty())
                return 0;
            if (isMatchingPair(POP(),input[i])==0)
                return 0;
            
        }
    }
    if (head == NULL) return 1;
    else return 0;
}
void printList()
{
    for (Node*p = head; p!=NULL; p=p->next)
        printf("%c ", p->data);
    printf("\n");
}

int main(void)
{
    char input[1000];
    scanf("%s", input);
    if (check_balanced(input))
        printf("1\n");
    else printf("0\n");

    return 0;
}
