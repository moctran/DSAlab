// Binary search tree
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define N 256
typedef struct Node {
    int key;
    struct Node *left, *right;
}Node;
 
// A utility function to create a new BST node
Node* newNode(int item)
{
    Node* temp
        = (Node*)malloc(sizeof(Node));
    temp->key = item;
    temp->left = temp->right = NULL;
    return temp;
}
 

Node* insert(Node* node, int key)
{
    /* If the tree is empty, return a new node */
    if (node == NULL)
        return newNode(key);
 
    /* Otherwise, recur down the tree */
    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);

    return node;
}
void postOrder(Node *r)
{
    if (r==NULL) return;
    postOrder(r->left);
    postOrder(r->right);
    printf("%d ", r->key); 
} 
void preOrder(Node *r)
{
    if (r==NULL) return;
    printf("%d ", r->key);
    preOrder(r->left);
    preOrder(r->right);
}
// Driver Code
int main()
{
    Node* root = NULL;
    char input[N];
    int r;
    scanf("%s", input);
    scanf("%d", &r);
    root = insert(root,r);
    while (1)
    {
        char cmd[N];
        scanf("%s", cmd);
        if (strcmp(cmd,"insert") == 0)
        {
            int k;
            scanf("%d", &k);
            insert(root,k);
        }
        else if (strcmp(cmd,"preorder") == 0)
        {
            preOrder(root);
            printf("\n");
        }
        else if (strcmp(cmd,"postorder") == 0)
        {
            postOrder(root);
            printf("\n");
        }
        else
            break;
    }
    return 0;
}
